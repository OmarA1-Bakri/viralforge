/**
 * PostCSS Plugin: CSS Custom Properties → Sass Variables
 *
 * Extracts CSS custom properties from index.css and generates Sass variables.
 * This ensures single source of truth: CSS custom properties are the source,
 * Sass variables are generated for advanced color manipulation.
 *
 * @see SASS_PERFORMANCE_BASELINE.md for performance tracking
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// HSL to HEX conversion for Sass output
function hslToHex(h, s, l) {
  s /= 100;
  l /= 100;

  const c = (1 - Math.abs(2 * l - 1)) * s;
  const x = c * (1 - Math.abs(((h / 60) % 2) - 1));
  const m = l - c / 2;

  let r = 0, g = 0, b = 0;

  if (h >= 0 && h < 60) {
    r = c; g = x; b = 0;
  } else if (h >= 60 && h < 120) {
    r = x; g = c; b = 0;
  } else if (h >= 120 && h < 180) {
    r = 0; g = c; b = x;
  } else if (h >= 180 && h < 240) {
    r = 0; g = x; b = c;
  } else if (h >= 240 && h < 300) {
    r = x; g = 0; b = c;
  } else if (h >= 300 && h < 360) {
    r = c; g = 0; b = x;
  }

  r = Math.round((r + m) * 255);
  g = Math.round((g + m) * 255);
  b = Math.round((b + m) * 255);

  return '#' + [r, g, b].map(x => {
    const hex = x.toString(16);
    return hex.length === 1 ? '0' + hex : hex;
  }).join('');
}

// Parse HSL string "184 88% 62%" to hex
function parseHslToHex(hslString) {
  const match = hslString.match(/([\d.]+)\s+([\d.]+)%\s+([\d.]+)%/);
  if (!match) return null;

  const [, h, s, l] = match;
  return hslToHex(parseFloat(h), parseFloat(s), parseFloat(l));
}

function generateSassFile(colors) {
  const timestamp = new Date().toISOString();

  let content = `/**
 * AUTO-GENERATED COLOR VARIABLES
 *
 * DO NOT EDIT THIS FILE MANUALLY!
 * Generated from CSS custom properties in index.css
 *
 * Generated: ${timestamp}
 * Source: postcss-css-to-sass.js
 */

// =============================================================================
// COLOR VARIABLES (HSL Format for Manipulation)
// =============================================================================

`;

  // Group colors by category
  const categories = {
    'Primary Colors': ['primary', 'primary-foreground'],
    'Accent Colors': ['accent', 'accent-foreground'],
    'Secondary Colors': ['secondary', 'secondary-foreground'],
    'Background Colors': ['background', 'foreground', 'card', 'card-foreground'],
    'UI Colors': ['border', 'input', 'ring', 'muted', 'muted-foreground'],
    'Semantic Colors': ['destructive', 'destructive-foreground'],
    'Chart Colors': ['chart-1', 'chart-2', 'chart-3', 'chart-4', 'chart-5'],
    'Sidebar Colors': Object.keys(colors).filter(k => k.startsWith('sidebar')),
    'Popover Colors': ['popover', 'popover-foreground', 'popover-border']
  };

  Object.entries(categories).forEach(([category, colorNames]) => {
    content += `// ${category}\n`;

    colorNames.forEach(name => {
      if (colors[name]) {
        const safeName = name.replace(/-/g, '_');
        content += `$color_${safeName}_hsl: hsl(${colors[name].hsl});\n`;
        content += `$color_${safeName}: ${colors[name].hex};\n`;
      }
    });

    content += '\n';
  });

  // Add helper comment
  content += `
// =============================================================================
// USAGE NOTES
// =============================================================================
//
// Each color has two variables:
// - $color_primary_hsl: For color manipulation (lighten, darken, adjust)
// - $color_primary: HEX value for CSS output
//
// Example:
//   background: $color_primary;                    // Use HEX for output
//   background: lighten($color_primary_hsl, 10%);  // Use HSL for manipulation
//
// =============================================================================
`;

  return content;
}

const plugin = (opts = {}) => {
  return {
    postcssPlugin: 'postcss-css-to-sass',
    Once(root, { result }) {
      const colors = {};

      // Extract all CSS custom properties from :root
      root.walkRules(':root', (rule) => {
        rule.walkDecls((decl) => {
          if (decl.prop.startsWith('--')) {
            const varName = decl.prop.slice(2); // Remove --
            const value = decl.value.trim();

            // Skip non-color variables
            if (varName.includes('status-bar') ||
                varName.includes('elevate') ||
                varName.includes('button-outline') ||
                varName.includes('badge-outline') ||
                varName.includes('opaque-button-border')) {
              return;
            }

            // Parse HSL values to HEX
            const hex = parseHslToHex(value);
            if (hex) {
              colors[varName] = {
                hsl: value,
                hex: hex
              };
            }
          }
        });
      });

      // Generate Sass file content
      const sassContent = generateSassFile(colors);

      // Write to client/src/styles/_generated-colors.scss
      const outputPath = path.join(__dirname, 'client/src/styles/_generated-colors.scss');
      fs.writeFileSync(outputPath, sassContent, 'utf8');

      console.log(`✅ Generated ${Object.keys(colors).length} Sass color variables`);
    }
  };
};

plugin.postcss = true;

export default plugin;
