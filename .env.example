# ViralForgeAI Environment Configuration
# Copy this to .env and fill in your actual values

# OpenRouter API key for AI services
OPENROUTER_API_KEY=your_openrouter_api_key_here

# Development configuration
NODE_ENV=development
PORT=5000

# Authentication & Security
JWT_SECRET=your_jwt_secret_change_in_production
JWT_EXPIRES_IN=24h
SESSION_SECRET=your_session_secret_change_in_production

# Neon Database URL
DATABASE_URL=postgresql://username:password@your-neon-endpoint/database?sslmode=require

# PostHog Analytics (optional)
# Get your API key from https://posthog.com
VITE_POSTHOG_API_KEY=your_posthog_api_key_here
POSTHOG_API_KEY=your_posthog_api_key_here
# VITE_POSTHOG_HOST=https://us.i.posthog.com
# POSTHOG_HOST=https://us.i.posthog.com

# Stripe Payment Integration (required for web subscriptions)
# Get your API keys from https://dashboard.stripe.com/apikeys
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key_here
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# RevenueCat Mobile Subscriptions (REQUIRED for mobile app)
# Get your API keys from https://app.revenuecat.com/settings
VITE_REVENUECAT_API_KEY=rcb_your_public_api_key_here
REVENUECAT_SECRET_KEY=sk_your_secret_key_here
REVENUECAT_WEBHOOK_SECRET=your_webhook_secret_here

# Token Encryption (REQUIRED for OAuth tokens)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ENCRYPTION_KEY=generate_with_crypto_randomBytes_32_hex

# YouTube OAuth (REQUIRED for YouTube profile analysis)
# Get from Google Cloud Console: https://console.cloud.google.com/apis/credentials
YOUTUBE_CLIENT_ID=your_oauth_client_id.apps.googleusercontent.com
YOUTUBE_CLIENT_SECRET=your_oauth_client_secret
YOUTUBE_REDIRECT_URI=https://your-domain.com/api/oauth/youtube/callback

# Firebase Authentication (REQUIRED for mobile app)
# Get from Firebase Console: https://console.firebase.google.com/project/YOUR_PROJECT/settings/general
VITE_FIREBASE_API_KEY=your_firebase_api_key_here
VITE_FIREBASE_AUTH_DOMAIN=your-project.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=your-project-id
VITE_FIREBASE_STORAGE_BUCKET=your-project.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=123456789012
VITE_FIREBASE_APP_ID=1:123456789012:web:abcdef123456
VITE_FIREBASE_MEASUREMENT_ID=G-ABCDEFGHIJ

# Application URLs (for Stripe redirects)
FRONTEND_URL=http://localhost:5173
VITE_API_BASE_URL=http://localhost:5000

# Optional: Pre-configured Stripe Price IDs (for performance optimization)
# STRIPE_PRICE_PRO_MONTHLY=price_...
# STRIPE_PRICE_PRO_YEARLY=price_...
# STRIPE_PRICE_AGENCY_MONTHLY=price_...
# STRIPE_PRICE_AGENCY_YEARLY=price_...

# Optional configurations
# PRIVATE_OBJECT_DIR=./uploads

# CrewAI agent orchestration service (FastAPI)
CREW_AGENT_URL=http://localhost:8002
CREW_TOOLS_URL=http://localhost:8001
# Legacy CLI fallback if you prefer running the Python script directly
# CREWAI_SCRIPT_PATH=server/agents/viral_crew.py

# OpenAI API (REQUIRED for CrewAI YouTube RAG tools - used for embeddings)
# Get your API key from: https://platform.openai.com/api-keys
# OPENAI_API_KEY=your_openai_api_key_here
# Alternative: CHROMA_OPENAI_API_KEY=your_openai_api_key_here

# YouTube API (for YouTube Data API v3 - optional for metadata)
# Get your API key from: https://console.cloud.google.com/apis/credentials
# YOUTUBE_API_KEY=your_youtube_api_key_here

# ===================================
# FEATURE FLAGS
# ===================================
# Enable/disable features without code changes for safe rollout and A/B testing
# Format: FEATURE_FLAGS__FLAG_NAME=true|false

# YouTube-Only Mode (default: false)
# When enabled, agents will only work with YouTube content instead of multi-platform
# FEATURE_FLAGS__YOUTUBE_ONLY_MODE=false

# Use CrewAI YouTube RAG Tools (default: false)  
# When enabled, uses CrewAI's built-in YouTube semantic search tools
# Requires: pip install 'crewai[tools]'
# FEATURE_FLAGS__USE_CREWAI_YOUTUBE_TOOLS=false

# Service Health Checks (default: true)
# When enabled, checks that crew-social-tools service is running before executing agents
# FEATURE_FLAGS__ENABLE_SERVICE_HEALTH_CHECKS=true

# Inject Knowledge Sources (default: true)
# When enabled, loads knowledge base files into agent context
# FEATURE_FLAGS__INJECT_KNOWLEDGE_SOURCES=true

# Content Caching (default: false)
# When enabled, caches discovered content and analysis results
# FEATURE_FLAGS__ENABLE_CONTENT_CACHING=false

# Performance Monitoring (default: false)
# When enabled, collects detailed performance metrics
# FEATURE_FLAGS__ENABLE_PERFORMANCE_MONITORING=false
